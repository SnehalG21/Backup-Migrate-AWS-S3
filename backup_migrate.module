<?php
use BackupMigrate\Core\Config\Config;

require __DIR__.'/vendor/autoload.php';

/**
 * Back up a source to 1 or more destinations.
 *
 * @param string $source_id
 * @param string|array $destination_id
 * @param array $config
 */
function backup_migrate_perform_backup($source_id, $destination_id, $config = []) {
  try {
    // Retrieve the service
    $bam = backup_migrate_get_service_object($config);

    // Run the backup.
    $bam->backup($source_id, $destination_id);
  }
  catch (Exception $e) {
    die ('Caught exception: ' . $e);
  }
}

/**
 * Get a BackupMigrate service object.
 *
 * @param array $config_array
 *  The configuration as an array.
 * @return \BackupMigrate\Core\Service\BackupMigrate
 */
function backup_migrate_get_service_object($config_array = []) {
  static $bam = NULL;

  // If the static cached object has not been loaded.
  if ($bam === NULL) {
    // Create the environment services.
    $logger = new \BackupMigrate\Drupal\Environment\DrupalSetMessageLogger();
    $files = new \BackupMigrate\Drupal\File\DrupalTempFileAdapter(\Drupal::service('file_system'), 'temporary://', 'bam');

    // Create the service locator
    $services = new \BackupMigrate\Core\Service\ServiceLocator();

    // Allow other modules to add services.
    \Drupal::moduleHandler()->alter('backup_migrate_services', $services);

    // Create the plugin manager
    $plugins = new \BackupMigrate\Core\Plugin\PluginManager($services);

    // Allow other modules to add plugins.
    \Drupal::moduleHandler()->alter('backup_migrate_plugins', $plugins);

    // Create the service object.
    $bam = new \BackupMigrate\Core\Main\BackupMigrate($plugins);

    // Allow other modules to alter the object
    \Drupal::moduleHandler()->alter('backup_migrate_service_object', $bam);
  }

  // Set the configuration overrides if any were passed in.
  if ($config_array) {
    $bam->setConfig(new \BackupMigrate\Core\Config\Config($config_array));
  }

  return $bam;
}

/**
 * Implements hook_backup_migrate_services_alter().
 *
 * Add the core Backup and Migrate services to the service locator.
 *
 * @param \BackupMigrate\Core\Service\ServiceLocatorInterface $services
 */
function backup_migrate_backup_migrate_services_alter(\BackupMigrate\Core\Service\ServiceLocator &$services) {

  // Add a temp file manager which can access the drupal temp directory.
  $services->add('TempFileAdapter',
    new \BackupMigrate\Drupal\File\DrupalTempFileAdapter(\Drupal::service('file_system'), 'temporary://', 'bam')
  );
  $services->add('TempFileManager',
    new \BackupMigrate\Core\File\TempFileManager($services->get('TempFileAdapter'))
  );

  // Add a logger which prints everything to the browser.
  $services->add('Logger',
    new \BackupMigrate\Drupal\Environment\DrupalSetMessageLogger()
  );

}


/**
 * Implements hook_backup_migrate_service_object_alter().
 *
 * Add the core Backup and Migrate plugins to the service object.
 *
 * @param \BackupMigrate\Core\Plugin\PluginManagerInterface $plugins
 */
function backup_migrate_backup_migrate_plugins_alter(\BackupMigrate\Core\Plugin\PluginManagerInterface &$plugins) {

  // Add the default database.
  $info = \Drupal\Core\Database\Database::getConnectionInfo('default', 'default');
  $info = $info['default'];
  if ($info['driver'] == 'mysql') {
    $plugins->add(
      'db',
      new \BackupMigrate\Core\Source\MySQLiSource(
        new \BackupMigrate\Core\Config\Config($info)
      ));
  }

  // Add a download destination.
  $plugins->add('download', new \BackupMigrate\Drupal\Destination\DrupalBrowserDownloadDestination());

  // Add a file naming filter.
  $plugins->add('namer', new \BackupMigrate\Core\Filter\FileNamer());

  // Add an S3 destination.
//  $bam->plugins()->add(
//    new \BackupMigrate\Drupal\Destination\DrupalS3Destination(
//      new \BackupMigrate\Core\Config\Config(
//        ['prefix' => 'path/to/backups'],
//      ),
//      new \BackupMigrate\Drupal\Destination\S3ReaderWriter([
//        'credentials' => s3_get_credentials(),
//      ]),
//      new \BackupMigrate\Drupal\Destination\S3Writer(),
//
//    ), 'download');
//
//  // Add an File destination.
//  $bam->plugins()->add(
//    new \BackupMigrate\Drupal\Destination\FileDirectorySource(
//      new \BackupMigrate\Drupal\Services\TarArchiveReader(),
//      new \BackupMigrate\Drupal\Services\TarArchiveWriter(),
//      new \BackupMigrate\Core\Config\Config(
//        ['directory' => 'public://']
//
//      )
//    ), 'files_public');


}
